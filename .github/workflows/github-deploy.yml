name: Charger Alert Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PROJECT_NAME: charger-alert
  ARTIFACT_NAME: charger-alert-build
  AWS_REGION: eu-west-1

jobs:
  test:
    strategy:
      matrix:
        test-type: [ charger, cdk ]
        include:
          - test-type: charger
            test-command: cargo test
          - test-type: cdk
            test-command: zip charger-alert.zip LICENSE && cd infra && npm i && npm test # fake zip as 'code' for the Lambda
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Test ${{ matrix.test-type }}
        run: ${{ matrix.test-command }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: setup Rust and the correct target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          key: ${{ env.PROJECT_NAME }}-build-cache
          path: |
            ./target/release
      - name: Build Rust release
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target x86_64-unknown-linux-musl
      - name: Zip Rust release
        run: zip -j ${{ env.PROJECT_NAME }}.zip ./target/x86_64-unknown-linux-musl/release/bootstrap
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./${{ env.PROJECT_NAME }}.zip

  deploy:
    needs:
      - test
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Deploy to AWS
        uses: youyo/aws-cdk-github-actions@v2
        with:
          working_dir: infra
          cdk_subcommand: deploy
          cdk_args: --require-approval never
          actions_comment: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
